\documentclass{article}
\usepackage{times}
\usepackage{fancyhdr}
\usepackage{extramarks}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amsfonts}
\usepackage{algpseudocode}
\usepackage{pdfpages} %insert pdf pages
\usepackage{enumerate}
\usepackage{listings}
\usepackage{algorithm}
\usepackage{graphicx}
\usepackage[]{algpseudocode}


%
% Basic Document Settings
%

\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in

\linespread{1.1}

\pagestyle{fancy}
\lhead{\hmwkAuthorName}
\chead{\hmwkClass\  }
\rhead{\hmwkTitle}
\lfoot{\lastxmark}
\cfoot{\thepage}

\renewcommand\headrulewidth{0.4pt}
\renewcommand\footrulewidth{0.4pt}

\setlength\parindent{0pt}


%
% Homework Details
%   - Title
%   - Due date
%   - Class
%   - Section/Time
%   - Instructor
%   - Author
%

\newcommand{\hmwkTitle}{Project Report \#4}
\newcommand{\hmwkDueDate}{May 1, 2015}
\newcommand{\hmwkClass}{ComS 535x}
\newcommand{\hmwkClassInstructor}{Instructor: Professor Aduri, Pavankumar}
\newcommand{\hmwkAuthorName}{Yuanyuan Tang, Chenguang He}

%
% Title Page
%

\title{
    \vspace{2in}
    \textmd{\textbf{\hmwkClass:\\\ \hmwkTitle}}\\
    \normalsize\vspace{0.1in}\small{Due\ on\ \hmwkDueDate\ }\\
    \vspace{0.1in}\large{\textit{\hmwkClassInstructor}}
    \vspace{3in}
}

\author{\textbf{\hmwkAuthorName}}
\date{}

\renewcommand{\part}[1]{\textbf{\large Part \Alph{partCounter}}\stepcounter{partCounter}\\}

\renewcommand{\thesection}{\arabic{section}}% Remove section references...
\renewcommand{\thesubsection}{\arabic{subsection}}%... from subsections



\renewcommand{\thesubsection}{\arabic{subsection}}
\makeatletter
\def\@seccntformat#1{\@ifundefined{#1@cntformat}%
   {\csname the#1\endcsname\quad}%       default
   {\csname #1@cntformat\endcsname}}%    enable individual control
\newcommand\section@cntformat{}
\makeatother

\begin{document}
\maketitle
\newpage
\tableofcontents
\newpage

\section{Algorithm for building index}
\begin{algorithm}
\caption{Index Algorithm}\label{alg:in}
\begin{algorithmic}[1]
\Procedure{Build Index}{$File f$}
\For {$Word w in f$}
\State $w \gets modify(w)$
\If{$w is in Inverted$}
\State $i \gets Inverted.get(w)$
\If {the last document in i.postringpart is current document}
\State $i.postringpart.TFtd \gets i.postringpart.TFtd + 1$
\Else
\State $i.postringpart.document \gets f$
\State $i.dictionaryPart.DFt \gets i.dictionaryPart.DFt + 1$
\EndIf
\Else
\State $i = new InvertedIndex$
\State $i.postingpart \gets (f,i)$
\EndIf
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\section{Data structures used for the index (for both dictionary and postings part)}
I build three classes, InvertedIndex, DictionaryPart and PostingsPart.\\

In InvertedIndex, it consist of a array with PostingsPart and one DictionaryPart. In PostingsPart it consist of a integer representation of the document, which the order of index is as same as in the files array, a TFtd. In DictionaryPart, it consist of a string of current term and the DFt.\\

The reason of using arraylist to store postingpart is that, we need to use the order of index to set the index increasing when we build the index. Also, the order is used to build the weight vector.


\section{Algorithm used to computed the length of document vectors}
I do not have any algorithm to compute the length of document vector.  In order to save the space, i do not store any null pointer in the vector since the weigh we need to compute is not related with the null pointer. So basiclly, i use $arraylist<arraylist>$ to represent the weighted vector, in the array, it contains the integer number before the normalization, after normalization, it consist of doubles. The length of document vector is build by following method:

\section{Algorithm for building vector}
\begin{algorithm}
\caption{building vector Algorithm}\label{alg:in}
\begin{algorithmic}[2]
\Procedure{Build vector}{$WeightedVector w$}
\For {$i \in InvertedIndex.values()$}
\If{$w is in Inverted$}
\State $i \gets Inverted.get(w)$
\If {the last document in i.postringpart is current document}
\State $i.postringpart.TFtd \gets i.postringpart.TFtd + 1$
\Else
\State $i.postringpart.document \gets f$
\State $i.dictionaryPart.DFt \gets i.dictionaryPart.DFt + 1$
\EndIf
\Else
\State $i = new InvertedIndex$
\State $i.postingpart \gets (f,i)$
\EndIf
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}


\end{document} 

